<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Welcome to Dream&#39;s blog </title>
    <link>https://zhengxiaomengmeng.github.io/tags/javascript/</link>
    <description>Recent content in Javascript on Welcome to Dream&#39;s blog </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Apr 2019 18:45:33 +0800</lastBuildDate>
    
	<atom:link href="https://zhengxiaomengmeng.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>错误监控类</title>
      <link>https://zhengxiaomengmeng.github.io/2019/04/%E9%94%99%E8%AF%AF%E7%9B%91%E6%8E%A7%E7%B1%BB/</link>
      <pubDate>Sun, 28 Apr 2019 18:45:33 +0800</pubDate>
      
      <guid>https://zhengxiaomengmeng.github.io/2019/04/%E9%94%99%E8%AF%AF%E7%9B%91%E6%8E%A7%E7%B1%BB/</guid>
      <description>错误监控类 问题提出 题目: 错误监控类有哪些或者如何保证产品质量？？
分析过程 需要掌握得知识点
 前端错误的分类
 错误的捕获方式
 上报错误的基本原理
  1.前端错误的分类
 即时运行错误：代码错误
 资源加载错误：（js、css、图片加载失败）
  2.错误的捕获方式
 即时运行错误： try…catch(需要把try&amp;hellip;catch布到代码中) window.onerror(dom0)只能捕获即时运行错误
  **资源加载错误：（js、css、图片加载失败）** object.onerror(通过节点绑onerror事件，捕获加载错误；) performance.getEntries(); 获取已加载资源时长，通过这个方式可以间接的拿到没有加载资源的错误； 返回的是一个数组，有forEach方法。 performance.getEntries().forEach(item=&amp;gt;{console.log(item.name)});可以得到已成功加载的资源。 document.getElementsByTagName(‘img’);能拿到所有img的一个集合，是我们所需要加载的所有 图片的一个集合减去上面已成功加载的集合，剩下就是没有成功加载的。 Error事件捕获 window上通过事件捕获一样可以拦截到资源加载错误。可以在捕获阶段拿到这个。 body中: &amp;lt;script src=“//baidu.com/test.js” charset=“utf-8”&amp;gt;&amp;lt;/script&amp;gt;//不存在 为了证明捕获可以拿到这个事件； head中： &amp;lt;script&amp;gt; window.addEventListener(‘error’,function(e){ conosle.log(‘捕获’,e); }); &amp;lt;/script&amp;gt; ==&amp;gt;报错 GETfiles | baidu.com | test.js 没找到 捕获 Event {isTrusted:true,’type’:’error’,target:script,currentTarget:window,eventphase:1…} 不会冒泡，script标签发生了错误，触发本身onerror事件已经可以了，不会向上冒泡到window。  延伸：跨域JS运行错误可以捕获吗，错误提示是什么，应该怎么处理？ 可以拿到所有跨域文件的代码错误；
Resource interpreted as script but transferred 错误信息：Script error.</description>
    </item>
    
    <item>
      <title>JS页面性能类</title>
      <link>https://zhengxiaomengmeng.github.io/2019/04/js%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E7%B1%BB/</link>
      <pubDate>Sun, 28 Apr 2019 15:20:46 +0800</pubDate>
      
      <guid>https://zhengxiaomengmeng.github.io/2019/04/js%E9%A1%B5%E9%9D%A2%E6%80%A7%E8%83%BD%E7%B1%BB/</guid>
      <description>JS页面性能类 问题提出 题目: 提升页面性能的方法有哪些？
分析过程 需要掌握得知识点
 资源压缩合并，减少HTTP请求
 非核心的代码异步加载—异步加载的方式—异步加载的区别
 利用浏览器缓存—缓存的分类—缓存的原理
 使用CDN（网络优化，CDN加载资源非常快）
 预解析DNS ```    **1.资源压缩合并，减少HTTP请求** 资源传输的过程变小 **2.非核心的代码异步加载—异步加载的方式—异步加载的区别** 异步加载的方式： &amp;gt; **1.动态脚本加载** —js创建了一个标签，把标签最后加到body上去或者head（加到文档当中实现加载） document.createElement(“*”); **2.defer** **3.async** **怎么用：** 在加载js时候在script标签上加这两个属性完成异步加载； **异步加载的区别：** &amp;gt; 1.defer是在HTML解析完之后才会执行，如果是多个，按照加载顺序依次执行； 2.async是在加载完之后立即执行，如果是多个，执行顺序和加载顺序无关； **异步加载原理：**（任何一个时刻都只能做一件事） &amp;gt; 1.defer：新加载的，在HTML解析完之前，是不会执行的；defer能保证按你的加载顺序依次执行； 2.async：哪个先回来，哪个先执行，和加载顺序无关； **3.利用浏览器缓存—缓存的分类—缓存的原理** - 缓存的分类： &amp;gt; **缓存：** 对应文件在浏览器中存在的备份（副本），把请求的东西缓存到本地了（是放在电脑磁盘中的），浏览器下次请求相当于是从这个磁盘直接读了，而不会再去请求这个文件的地址。 **1. 强缓存**  http协议头： Expires Expires:Thu,21 Jan 2017 23:39:02 GMT Cache-Control Cahe-Control : Max-age=3600
 &amp;gt; **强缓存**：问都不问，不直接请求，直接拿过来就用了；不管是绝对时间还是相对时间，这个时间过期之前不会和服务器通信了，直接从浏览器副本拿出来给页面用； ``` HTTP协议头： 在请求一个文件的时候，http头上（响应头上）会带两个东西（有可能是2个，也有可能是1个，根据服务器配置）； 响应头中会有key，value Expires 过期时间； value值表示的是绝对时间（服务器的绝对时间，这个时间是服务器下发的） 判断客户端当前的时候是不是这个时间，比较的时候是按浏览器本地的时间做比较，下发的是服务器端的时间，会有偏差； 缺点：有可能客户端和服务器的时间不一致。 Cache-Control value值 Max-age=3600（相对时间） 不管客户端和服务器时间是否一致，它最后是以客户端相对时间为止，时间单位是秒（拿到资源之后再3600s之内不会再去请求服务器，在这个时间之内直接去浏览器拿缓存） *如果服务器两个时间都下发了，依哪个时间为准呢？ 以后者相对时间为准（这个规定）  2.</description>
    </item>
    
    <item>
      <title>JS运行机制</title>
      <link>https://zhengxiaomengmeng.github.io/2019/04/js%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Sun, 28 Apr 2019 13:59:33 +0800</pubDate>
      
      <guid>https://zhengxiaomengmeng.github.io/2019/04/js%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/</guid>
      <description></description>
    </item>
    
    <item>
      <title>算法类</title>
      <link>https://zhengxiaomengmeng.github.io/2019/04/%E7%AE%97%E6%B3%95%E7%B1%BB/</link>
      <pubDate>Sat, 27 Apr 2019 22:54:22 +0800</pubDate>
      
      <guid>https://zhengxiaomengmeng.github.io/2019/04/%E7%AE%97%E6%B3%95%E7%B1%BB/</guid>
      <description>算法类 问题提出 题目: 算法类问题
分析过程 需要掌握得知识点
 排序
 堆栈、队列、链表
 递归
 波兰式和逆波兰式
  1. 排序(重要)
 冒泡排序
 快速排序(重要) &amp;gt; https://segmentfault.com/a/1190000009426421
 选择排序(重要) &amp;gt; https://segmentfault.com/a/1190000009366805
 希尔排序(重要) &amp;gt; https://segmentfault.com/a/1190000009461832
  2.堆栈(重要)、队列、链表
 &amp;ndash;JS数组本身就是具备堆栈，队列的特性； pop、push、shift、unshift 这个四个api已经帮我们实现堆栈和队列；
堆栈：先进后出；可以让unshift进，pop出； https://juejin.im/entry/58759e79128fe1006b48cdfd 队列： https://juejin.im/entry/58759e79128fe1006b48cdfd 链表： https://juejin.im/entry/58759e79128fe1006b48cdfd
 3.递归(重要)（60%算法题都要用到递归）
 https://segmentfault.com/a/1190000009857470
 递归的终止条件和参数传递？
4.波兰式和逆波兰式 eg：(1+35)(4+63&amp;frasl;2)用js来写怎么去实现最后的结果？ 理论： http://www.cnblogs.com/chenying99/p/3675876.html 源码： https://github.com/Tairraos/rpn.js/blob/master/rpn.js</description>
    </item>
    
    <item>
      <title>通信类</title>
      <link>https://zhengxiaomengmeng.github.io/2019/04/%E9%80%9A%E4%BF%A1%E7%B1%BB/</link>
      <pubDate>Sat, 27 Apr 2019 13:41:44 +0800</pubDate>
      
      <guid>https://zhengxiaomengmeng.github.io/2019/04/%E9%80%9A%E4%BF%A1%E7%B1%BB/</guid>
      <description>通信类 问题提出 题目: 通信类问题
分析过程 需要掌握得知识点
 什么是同源策略及限制
 前后端如何通信
 如何创建Ajax
 跨域通信的几种方式
  1.什么是同源策略及限制
 1.同源策略限制从一个源加载的文档或脚本与来自另一个源的资源进行交互。 ( 这是一个用于隔离潜在恶意文件的关键的安全机制。) 2.一个源包括：协议、域名、端口 （这三个有一个不一样就是源不一样，就是我们所说的跨域了） http:// 协议 www.xxx.com 域名 没指名端口默认80 3.限制：不是一个源的文档没有权利去操作另一个源的文档；
 主要限制在几个方面：
 Cookie、LocalStorage 和 IndexDB 无法读取 &amp;ndash;操作不了Cookie、LocalStorage、IndexDB
 DOM无法获得 &amp;ndash;无法获取和操作另一个资源的DOM
 Ajax请求不能发送（同源下的通信方式） &amp;ndash;Ajax只适合同源的通信（跨域就不行了）
  2.前后端如何通信
 1、Ajax &amp;ndash;同源下的通信方式 2、WebSocket &amp;ndash;不受同源策略的限制 3、CORS &amp;ndash;支持跨域通信，也支持同源通信
 3.如何创建Ajax
 1、XMLHttpRequest对象的工作流程 2、兼容性处理 3、事件的触发条件 4、事件的触发顺序
  function ajax(url,fnSucc,fnFaild){ //1、创建一个对象（兼容IE6写法） var xhr = XMLHttpRequest ?</description>
    </item>
    
    <item>
      <title>面向对象</title>
      <link>https://zhengxiaomengmeng.github.io/2019/04/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Fri, 26 Apr 2019 14:33:27 +0800</pubDate>
      
      <guid>https://zhengxiaomengmeng.github.io/2019/04/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid>
      <description>面向对象 问题提出 题目: 面向对象问题
分析过程 需要掌握得知识点
 类与实例（类的声明、生成实例）
 类与继承（如何实现继承、继承的几种方式）
  1.类与实例
1.1.类的声明 eg: 1. function Animal(){ this.name = &amp;quot;name&amp;quot;; } 2.ES6中类(class)的声明 class Animal2{ constructor(){ this.name = name; } } 1.2.(如何通过类实例化生成对象)生成实例 eg: //如果构造函数后面没有参数，new后面这个()是可以不要的； 1.console.log(new Animal(),new Animal2());  2.类与继承
问题
 如何实现继承？ 继承的几种方式、各个形式都有什么优点和缺点？   继承的本质（原理**）就是原型链。
 借助构造函数实现继承   （只实现了部分继承，如果父类的属性都在构造函数上，那没有问题； 如果父类的原型对象上还有方法，子类是拿不到这些方法的） function Parent1(){ this.name = &amp;quot;parent1&amp;quot;; } function Child(){ //call和apply改变的是函数运行上下文，把父级（Parent1这个构造函数）在子函数里执行的话， 同时修改了父级构造函数this的指向，从而导致了父类执行的时候属性都会挂在Child类实例上去。 //将父级的构造函数的this指向一个子构造函数的实例上去，父级构造函数所有的属性在子类中也有 Parent1.call(this); this.type=&amp;quot;child1&amp;quot;; } console.log(new Child()); 缺点：Parent1原型链上的东西并没有被Child所继承； 没有继承父类原型对象上的方法，导致的并没有真正的实现继承； function Parent1(){ this.</description>
    </item>
    
    <item>
      <title>原型链类</title>
      <link>https://zhengxiaomengmeng.github.io/2019/04/%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%B1%BB/</link>
      <pubDate>Thu, 25 Apr 2019 16:07:50 +0800</pubDate>
      
      <guid>https://zhengxiaomengmeng.github.io/2019/04/%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%B1%BB/</guid>
      <description>原型链类 问题提出 题目:原型链类
分析过程 需要掌握得知识点
 创建对象的几种方法
 原型、构造函数、实例、原型链
 instanceof的原理
 new 运算符
  1.创建对象的几种方法
 字面量 构造函数 Object.create  &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt; // 第一种方式：字面量 var o1 = { name: &amp;quot;o1&amp;quot; }; var o2 = new Object({ name: &amp;quot;o2&amp;quot; }); // 第二种方式：构造函数 var M = function(name) { this.name = name; }; var o3 = new M(&amp;quot;o3&amp;quot;); // 第三种方式：Object.create var p = { name: &amp;quot;p&amp;quot; }; var o4 = Object.</description>
    </item>
    
    <item>
      <title>JavaScript堆栈原理</title>
      <link>https://zhengxiaomengmeng.github.io/2019/03/javascript%E5%A0%86%E6%A0%88%E5%8E%9F%E7%90%86/</link>
      <pubDate>Thu, 07 Mar 2019 22:31:13 +0800</pubDate>
      
      <guid>https://zhengxiaomengmeng.github.io/2019/03/javascript%E5%A0%86%E6%A0%88%E5%8E%9F%E7%90%86/</guid>
      <description>JavaScript堆栈原理 堆&amp;amp;栈 两者都是用来存放临时数据。
栈是先进后出的，就像一个桶，后进去的先出来，它下面本来有的东西要等其他出来之后才能出来。
堆是在程序运行时，而不是在程序编译时，申请某个大小的内存空间。即动态分配内存，对其访问和对一般内存的访问没有区别。对于堆，我们可以随心所欲的进行增加变量和删除变量，不用遵循次序。
栈区（stack） 由编译器自动分配释放 ，存放函数的参数值，局部变量的值等。
堆区（heap） 一般由程序员分配释放，若程序员不释放，程序结束时可能由OS回收。
堆（数据结构）：堆可以被看成是一棵树，如：堆排序；
栈（数据结构）：一种先进后出的数据结构。
数据类型访问&amp;amp;&amp;amp;复制 基本数据类型：基本数据类型值指保存在栈内存中的简单数据段。访问方式是按值访问。
 var a =1 ;
 栈内存  a 1        操作的是变量实际保存的值。当a = 2时，栈内存的1直接改成2。
 基本类型变量的复制：从一个变量向一个变量复制时，会在栈中创建一个新值，然后把值复制到为新变量分配的位置上。
 var b=a;
 栈内存  a 1  b 1    var b=2; //把栈中b所对应的值改成2，a的值不变，仍然是1；
 引用数据类型：引用数据类型值指保存在堆内存中的对象。也就是，变量中保存的实际上的只是一个指针，这个指针指向内存中的另一个位置，该位置保存着对象。访问方式是按引用访问。
 var a = new Object(); //(引用指针指向object)
 栈内存  堆内存  a 引用指针 object            当操作时，需要先从栈中读取内存地址，然后再延指针找到保存在堆内存中的值再操作。</description>
    </item>
    
    <item>
      <title>闭包</title>
      <link>https://zhengxiaomengmeng.github.io/2019/02/%E9%97%AD%E5%8C%85/</link>
      <pubDate>Sun, 24 Feb 2019 21:36:22 +0800</pubDate>
      
      <guid>https://zhengxiaomengmeng.github.io/2019/02/%E9%97%AD%E5%8C%85/</guid>
      <description>闭包 阮一峰学习闭包
闭包的概念 高程上关于闭包的定义：闭包是指有权访问另一个函数作用域中的变量的函数
简单理解就是：定义在一个函数内部的函数
在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。
创建闭包的方式：在一个函数内部创建另一个函数
function f1(){ var n=999; function f2(){ alert(n); } return f2; } var result=f1(); result(); // 999  其中f2( )就是一个闭包能够访问它上一级函数f1()中的变量n。
闭包关于作用域链的图示：
闭包的用途 1、读取其他函数内部的变量
2、让这些变量的始终保持在内存中，这是一个双刃剑，可以方便的访问内部的变量，即使函数执行完成，其内部变量还保存在内存中可以访问，但是也会带来一系列的问题，外部函数的作用域链和变量对象不能销毁，占用内存。
来看一个典型的例子
var result = new Array(); function createFunctions(){ for (var i=0; i &amp;lt; 10; i++){ result[i] = function(){ console.log(i); }; } } result[6](); //10  从表面上看，似乎每一个函数都返回10 ，但实际上，每个函数都返回10， 因为每个函数的作用域链中都保存着父级函数的活动对象，他们的引用的都是同一个变量i，当父级函数return result 后，变量i的值变成10 ，每个函数引用保存变量i的同一个变量对象，因为此时i=10，所以引用变量指向的值都变成10。
解决这个问题最方便的一个方法是将闭包函数立即执行，每次引用都变成实际i对应的值。每次循环立即执行后销毁引用变量。
var result = new Array(); function createFunctions(){ for (var i=0; i &amp;lt; 10; i++){ result[i] = function(){ var c = i; return function () { console.</description>
    </item>
    
  </channel>
</rss>